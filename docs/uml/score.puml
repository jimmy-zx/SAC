@startuml

class ScoreSystemLayer {
- scoreObservers: List<ScoreObserver>
- score: int
+ notifyAllObservers(DataPackage)
+ getScore(): int
+ addScoreObserver(ScoreObserver): ScoreSystemLayer
}

abstract ScoreObserver {
+ getScore(): int
+ update(DataPackage)
}

class LinearObserver {
- level: int
+ getScore(): int
+ update(DataPackage)
}

class ComboScoreObserver {
- combo: int
+ getScore(): int
+ update(DataPackage)
}

class TSpinObserver {
+ getScore(): int
+ update(DataPackage)
}

class BackToBackObserver {
- lastTetris: boolean
- lastTspin: boolean
+ getScore(): int
+ update(DataPackage)
}

ScoreSystemLayer o--> ScoreObserver
ScoreObserver <|.. LinearObserver
ScoreObserver <|.. ComboScoreObserver
ScoreObserver <|.. TSpinObserver
ScoreObserver <|.. BackToBackObserver

@enduml
