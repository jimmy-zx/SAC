@startuml

class ScoreSystemLayer {
- scoreObservers: List<ScoreObserver>
- score: int
+ notifyAllObservers(DataPackage)
+ getScore(): int
+ addScoreObserver(ScoreObserver): ScoreSystemLayer
}

note right of ScoreSystemLayer::notifyAllObservers
for ScoreObserver o in scoreObservers:
    o.update(DataPackage)
end note

note left of ScoreSystemLayer::getScore
for ScoreObserver o in scoreObservers:
    this.score += o.getScore()
end note

abstract ScoreObserver {
+ getScore(): int
+ update(DataPackage)
}

class LinearObserver {
- level: int
+ getScore(): int
+ update(DataPackage)
}

class ComboScoreObserver {
- combo: int
+ getScore(): int
+ update(DataPackage)
}

class TSpinObserver {
+ getScore(): int
+ update(DataPackage)
}

class BackToBackObserver {
- lastTetris: boolean
- lastTspin: boolean
+ getScore(): int
+ update(DataPackage)
}

class Controller {

}

note right of Controller
Controller call scoreSystemLayer.getScore(),
then update score to the view
end note

ScoreSystemLayer o--> ScoreObserver
ScoreObserver <|.. LinearObserver
ScoreObserver <|.. ComboScoreObserver
ScoreObserver <|.. TSpinObserver
ScoreObserver <|.. BackToBackObserver
Controller --> ScoreSystemLayer
@enduml
