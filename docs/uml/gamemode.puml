@startuml


interface GameCore {
+ getPieceGenerator(): Generator
+ getRotationSystem(): RotationSystem
+ getSpawnPosition(Piece): Point
+ getWidth(): int
+ getHeight(): int
+ getBuffer(): int
}

note bottom of GameCore
Unique features of each game.
end note

class DefaultCore {
}

class CustomizeCore {
+ setPieceGenerator(Generator)
+ setRotationSystem(RotationSystem)
+ setSize(int, int, int)
}

interface GameLayer {
+ onGameStart()
+ isGameEnd(): boolean
+ notifyAllObservers(DataPackage)
}

note bottom of GameLayer
Pluggable extra features of game.
end note

class LineCountLayer {
- count: int
- total: int
+ isGameEnd()
}

class TimedLayer {
- startTime: long
- timer: long
+ isGameEnd()
}

class ScoreSystemLayer {
- score: int
+ getScore(): int
+ notifyAllObservers(DataPackage)
}

class GameMode {
- core: GameCore
- layers: Stack<GameLayer>
+ setCore(GameCore)
+ addLayer(GameLayer)
+ removeLayer(GameLayer)
}

note top of GameMode
Servers as a mediator.
Implements GameCore by passing the call directly to core.
Implements GameLayer by composing all layers.
end note

GameMode o--> GameLayer
GameMode o--> GameCore

DefaultCore ..|> GameCore
CustomizeCore ..|> GameCore
GameMode ..|> GameCore

LineCountLayer ..|> GameLayer
ScoreSystemLayer ..|> GameLayer
TimedLayer ..|> GameLayer
GameMode ..|> GameLayer

@enduml
